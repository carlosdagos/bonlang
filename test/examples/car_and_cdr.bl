---
output: "Carlos\nAndrés\nAndrés\nCarlos\n[1,3,5,7,9]\n[2,4,6,8,10]\n"
---

/*
 * Classic CAR/CRD
 *
 * https://en.wikipedia.org/wiki/CAR_and_CDR
 * https://mitpress.mit.edu/sicp/full-text/sicp/book/node30.html
 */
module Main where

def cons [x, y, m] = if == $ m 0
                        then x
                        else y

// `z` is a function with one parameter "pending"
def car [z] = z $ 0
def cdr [z] = z $ 1

def swap [z] = cons $ (cdr $ z) (car $ z)

def main [] = {
  // `myCons` is a curried `cons`, pending one argument
  // which is applied later by `car` and `cdr`
  val myCons = cons $ "Carlos" "Andrés";

  puts-ln $ (car $ myCons);
  puts-ln $ (cdr $ myCons);

  puts-ln $ (car $ (swap $ myCons));
  puts-ln $ (cdr $ (swap $ myCons));

  // This way we can work with pairs
  val listOfPairs = [
    cons $ 1 2
  , cons $ 3 4
  , cons $ 5 6
  , cons $ 7 8
  , cons $ 9 10
  ];

  // Print only the first element of the pair
  puts-ln $ (map $ car listOfPairs);

  // Print the second element of the pairs
  puts-ln $ (map $ cdr listOfPairs);
}
