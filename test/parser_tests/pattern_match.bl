module Main where

def is-zero [num] =
  match num {
    0 -> true;
    _ -> false;
  }

def is-carlos [str] =
  match str {
    "carlos" -> true;
     _       -> false;
  }

def is-single-element [list] =
  match list {
    [_] -> true;
    _   -> false;
  }

def list-starts-with-one? [list] =
  match list {
    [ 1 | _ ] -> true;
    _         -> false;
  }

def list-has-one-a-wildcard-and-three? [list] =
  match list {
    [ 1, _, 3 | _ ] -> true;
    _               -> false;
  }

def main [] = {
  puts $ "Is zero? 0 => ";
  puts-ln $ (to-string $ (is-zero $ 0));

  puts $ "Is zero? 2 => ";
  puts-ln $ (to-string $ (is-zero $ 2));

  puts $ "Is string? carlos => ";
  puts-ln $ (to-string $ (is-carlos $ "carlos"));

  puts $ "Is string? mauro => ";
  puts-ln $ (to-string $ (is-carlos $ "mauro"));

  puts $ "Is is-single-element? [] => ";
  puts-ln $ (to-string $ (is-single-element $ []));

  puts $ "Is is-single-element? [\"a\"] => ";
  puts-ln $ (to-string $ (is-single-element $ ["a"]));

  puts $ "Is is-single-element? [1, 2, 3] => ";
  puts-ln $ (to-string $ (is-single-element $ [1, 2, 3]));

  puts $ "Is list-starts-with-one? [1, 2, 3] => ";
  puts-ln $ (to-string $ (list-starts-with-one? $ [1, 2, 3]));

  puts $ "Is list-starts-with-one? [1] => ";
  puts-ln $ (to-string $ (list-starts-with-one? $ [1]));

  puts $ "Is list-starts-with-one? [0, -1, -3] => ";
  puts-ln $ (to-string $ (list-starts-with-one? $ [0, -1, -2]));

  puts $ "Is list-has-one-a-wildcard-and-three? [1, 2, 3] => ";
  puts-ln $ (to-string $ (list-has-one-a-wildcard-and-three? $ [1, 2, 3]));

  puts $ "Is list-has-one-a-wildcard-and-three? [1, 2, 3, 4] => ";
  puts-ln $ (to-string $ (list-has-one-a-wildcard-and-three? $ [1, 2, 3, 4]));

  puts $ "Is list-has-one-a-wildcard-and-three? [1, -1, 4] => ";
  puts-ln $ (to-string $ (list-has-one-a-wildcard-and-three? $ [1, -1, 4]));

  puts $ "Is list-has-one-a-wildcard-and-three? [] => ";
  puts-ln $ (to-string $ (list-has-one-a-wildcard-and-three? $ []));
}
